type Agent {
    id: ID! @rename(attribute: "guid")

    "Name of the agent"
    name: String
    lastName: String @rename(attribute: "last_name")
    firstName: String @rename(attribute: "first_name")
    initials: String
    email: Email
    legalName: String @rename(attribute: "legal_name")

    "Type of agent"
    agentType: AgentTypeEnum @rename(attribute: "agentTypeName")

    members: [GroupPerson]
    user: User @guard(with: ["api"])
}

type GroupPerson {
    id: ID! @rename(attribute: "guid")
    group: Agent!
    member: Agent!
    sequence: Int!
}

input CreateAgentInput {
    agentType: AgentTypeEnum!
    name: String
    lastName: String @rename(attribute: "last_name")
    firstName: String @rename(attribute: "first_name")
    initials: String
    email: Email
    legalName: String @rename(attribute: "legal_name")
    agentType: AgentTypeEnum @rename(attribute: "agentTypeName")
    members: [CreateGroupPersonInput]
}

input UpdateAgentInput {
    id: ID!
    agentType: AgentTypeEnum!
    name: String
    lastName: String @rename(attribute: "last_name")
    firstName: String @rename(attribute: "first_name")
    initials: String
    email: Email
    legalName: String @rename(attribute: "legal_name")
    agentType: AgentTypeEnum @rename(attribute: "agentTypeName")
    members: [GroupPersonInput]
}

input CreateGroupPersonInput {
    sequence: Int
    group: AgentBelongsTo
    member: AgentBelongsTo!
}

input UpdateGroupPersonInput {
    id: ID!
    sequence: Int!
}

input GroupPersonInput {
    id: ID
    sequence: Int!
    group: AgentBelongsTo
    member: AgentBelongsTo!
}

input AgentBelongsTo {
    connect: ID
}

input LinkUserInput {
    id: ID!
    name: String!
    email: Email!
}

extend type Query {
    agent(id: ID! @eq(key: "guid")): Agent @find

    agentAutocomplete(q: String! @ilike(key: "name")): [Agent]
        @all
        @orderBy(column: "name", direction: "ASC")

    personAutocomplete(q: String): [Agent]
        @field(resolver: "\\App\\GraphQL\\Queries\\PersonAutocomplete")
}

extend type Mutation {
    updateGroupPerson(input: UpdateGroupPersonInput!): GroupPerson!
        @guard(with: ["api"])
        @field(resolver: "\\App\\GraphQL\\Mutations\\UpdateGroupPerson")

    createGroupPerson(input: CreateGroupPersonInput!): GroupPerson!
        @guard(with: ["api"])
        @field(resolver: "\\App\\GraphQL\\Mutations\\CreateGroupPerson")

    deleteGroupPerson(id: ID!): GroupPerson
        @guard(with: ["api"])
        @field(resolver: "\\App\\GraphQL\\Mutations\\DeleteGroupPerson")

    updateAgent(input: UpdateAgentInput!): Agent
        @guard(with: ["api"])
        @field(resolver: "\\App\\GraphQL\\Mutations\\UpdateAgent")

    createAgent(input: CreateAgentInput!): Agent
        @guard(with: ["api"])
        @field(resolver: "\\App\\GraphQL\\Mutations\\CreateAgent")

    linkUserToAgent(input: LinkUserInput!): Agent
        @guard(with: ["api"])
        @field(resolver: "\\App\\GraphQL\\Mutations\\LinkUserToAgent")
}
