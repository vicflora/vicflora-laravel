type TaxonConcept {
    id: ID! @rename(attribute: "guid")

    """
    editorNotes about a taxon. We only use this for Taxon Concepts that are not 
    currently recognised. For currently accepted taxa the notes are in the 
    profile.
    """
    remarks: String

    """
    Name of a taxon
    """
    taxonName: TaxonName!

    """
    Source of the taxon name and application. This is currently only used with 
    misapplications.
    """
    accordingTo: Reference

    """
    Accepted name, e.g. for a synonym. We currently still deal with synonyms as 
    Taxon Concepts.
    """
    acceptedConcept: TaxonConcept

    """
    Parent of a taxon, e.g. a genus a species belongs to.
    """
    parent: TaxonConcept

    """
    Children of a taxon, e.g. varieties of a species or species in a genus.
    """
    children: [TaxonConcept]

    """
    Siblings of the taxon, e.g. species in the same genus. Also includes the 
    current Taxon Concept itself.
    """
    siblings: [TaxonConcept]

    """
    All ancestors of Taxon
    """
    ancestors: [TaxonConcept]

    """
    All descendants of a taxon, e.g. genera, species and infraspecific taxa in a 
    family.
    """
    descendants: [TaxonConcept]

    """
    Higher classification of a taxon. Like ancestors, but ordered from higher to 
    lower rank, and only including major ranks: kingdom, phylum, class, order, 
    family, genus, species.
    """
    higherClassification: [TaxonConcept]
        @field(resolver: "\\App\\GraphQL\\Queries\\TaxonConceptHigherClassification")

    """
    The rank of a taxon, or rather its name. This is an enumeration, so output 
    is a (all uppercase) string.
    """
    taxonRank: TaxonRankEnum

    """
    Rank of a taxon in the form of an object.
    """
    taxonTreeDefItem: TaxonTreeDefItem

    """
    The status of the use of the scientificName as a label for a taxon.
    Requires taxonomic opinion to define the scope of a taxon. Rules of
    priority then are used to define the taxonomic status of the nomenclature
    contained in that scope, combined with the experts opinion. It must be
    linked to a specific taxonomic reference that defines the concept
    (http://rs.tdwg.org/dwc/terms/taxonomicStatus).
    """
    taxonomicStatus: TaxonomicStatusEnum
        @rename(attribute: "taxonomicStatusName")

    """
    A statement about the presence or absence of a Taxon at a Location
    (http://rs.tdwg.org/dwc/terms/occurrenceStatus).
    """
    occurrenceStatus: OccurrenceStatusEnum
        @rename(attribute: "occurrenceStatusName")

    """
    Statement about whether an organism or organisms have been introduced to a
    given place and time through the direct or indirect activity of modern
    humans (http://rs.tdwg.org/dwc/terms/establishmentMeans).
    """
    establishmentMeans: EstablishmentMeansEnum
        @rename(attribute: "establishmentMeansName")

    """
    The degree to which an Organism survives, reproduces, and expands its range
    at the given place and time
    (http://rs.tdwg.org/dwc/terms/degreeOfEstablishment).
    """
    degreeOfEstablishment: DegreeOfEstablishmentEnum
        @rename(attribute: "degreeOfEstablishmentName")

    """
    Endemis to Victoria; does not natively occur outside Victoria.
    """
    endemic: Boolean @rename(attribute: "is_endemic")

    """
    Taxon is native to Victoria, but there are introduced  occurrences in
    Victoria as well. This flag is used to deal with the 'dual status' from the
    old vascular plant censuses.
    """
    hasIntroducedOccurrences: Boolean
        @rename(attribute: "has_introduced_occurrences")

    """
    Environment Protection and Biodiversity Conservation (EPBC) Act 1999
    """
    epbc: IUCNThreatStatusEnum

    """
    Flora and Fauna Guarantee (FFG) Act 1988
    """
    ffg: IUCNThreatStatusEnum

    """
    Advisory list of rare or threatened plants in Victoria
    """
    vicAdvisory: VicAdvisoryEnum

    """
    Common or vernacular names
    """
    vernacularNames: [VernacularName]

    """
    Preferred vernacular name. Often there are multiple vernacular names for the 
    same taxon. The preferred vascular name is the one we use in VicFlora.
    """
    preferredVernacularName: VernacularName

    """
    Profiles for a Taxon Concept. We save previous profiles and versions of 
    profiles.
    """
    profiles: [Profile]

    """
    Current profile for a Taxon Concept. The body of the current profile is 
    changed in the API from what is stored in the database. We add links to 
    taxon pages in VicFlora for names that are mentioned in the notes, add the 
    Victorian bioregions the taxon is reported from and add the source and 
    information on when and by whom a profile was created or last updated.
    """
    currentProfile: Profile
        @field(resolver: "\\App\\GraphQL\\Queries\\TaxonConceptCurrentProfile")

    """
    Hero image for a taxon, i.e. the image that is shown in the overview tab.
    """
    heroImage: Image
        @field(resolver: "\\App\\GraphQL\\Queries\\TaxonConceptHeroImage")

    """
    Flag to indicate whether a Taxon Concept has images associated with it. Used 
    in VicFlora to see if an Image tab needs to be created on the taxon 
    page. Image metadata and thumbnails will be fetched once the Image tab is 
    opened.
    """
    hasImages: Boolean

    """
    Images associated with a Taxon Concept
    """
    images: [Image]
        @paginate(
            builder: "\\App\\GraphQL\\Queries\\TaxonConceptImages"
            defaultCount: 20
        )

    """
    Flag to indicate whether a Taxon Concept has specimen images associated with 
    it. Used in VicFlora to see if a Specimen Image tab needs to be created on 
    the taxon page. Image metadata and thumbnails will be fetched once the 
    Specimen Image tab is opened.
    """
    hasSpecimenImages: Boolean
    specimenImages: [SpecimenImage]
        @paginate(
            builder: "\\App\\GraphQL\\Queries\\TaxonConceptSpecimenImages"
            defaultCount: 20
        )

    """
    Victorian bioregions where the taxon occurs.
    """
    bioregions: [TaxonBioregion]

    """
    Local Government Areas where the taxon occurs
    """
    localGovernmentAreas: [TaxonLocalGovernmentArea]

    """
    Parks and reserves where the taxon occurs.
    """
    parkReserves: [TaxonParkReserve]

    # occurrences(source: String @eq(key: "data_source")): [OccurrenceFeature]
    #     @paginate(
    #         type: PAGINATOR
    #         defaultCount: 20
    #         builder: "\\App\\GraphQL\\Queries\\TaxonConceptOccurrences"
    #     )
    # avhOccurrences: [OccurrenceFeature]
    #     @paginate(
    #         type: PAGINATOR
    #         defaultCount: 20
    #         builder: "\\App\\GraphQL\\Queries\\TaxonConceptAvhOccurrences"
    #     )
    # vbaOccurrences: [OccurrenceFeature]
    #     @paginate(
    #         type: PAGINATOR
    #         defaultCount: 20
    #         builder: "\\App\\GraphQL\\Queries\\TaxonConceptVbaOccurrences"
    #     )

    """
    Links to distribution maps for a taxon from the Geoserver instance, as well 
    as the captions.
    """
    mapLinks: MapLinks
        @field(resolver: "\\App\\GraphQL\\Queries\\TaxonConceptMapLinks")
    identificationKeys: [IdentificationKey!]!
        @field(resolver: "\\App\\GraphQL\\Queries\\TaxonConceptKeys")
    matrixKeys: [MatrixKey]

    """
    Synonyms of the accepted name (`taxonName`). 
    """
    synonyms: [TaxonName]

    """
    This has been added, because currently the VicFlora system requires synonyms
    to be provided as usages (concepts). Once VicFlora is set up for concept
    alignments, we might not be able to provide synonyms this way anymore.
    """
    synonymUsages: [TaxonConcept]

    """
    This has been added, because currently the VicFlora system requires 
    misapplications to be provided as usages (concepts). Once VicFlora is set up 
    for concept alignments, we might not be able to provide synonyms this way 
    anymore.
    """
    misapplications: [TaxonConcept]

    """
    References cited in the profile of a Taxon Concept. We have a Taxon 
    Concept Reference type rather than a simple association to resolve the 
    many-to-many relationship between Taxon Concept and Reference. At the moment 
    it does not have any data properties, but we have the option to add them 
    later.
    """
    references: [TaxonConceptReference] 
        @rename(attribute: "orderedReferences")

    """
    Links to other floras. We've got a type, Taxon Concept Flora Link, for this, 
    so, in principle extra information can be added.
    """
    floraLinks: [TaxonConceptFloraLink]
        @rename(attribute: "orderedFloraLinks")

    createdBy: Agent
    modifiedBy: Agent
    createdAt: DateTimeTz @rename(attribute: "created_at")
    updatedAt: DateTimeTz @rename(attribute: "updated_at")
    version: Int
}

input CreateTaxonConceptInput {
    taxonName: TaxonNameBelongsTo!
    accordingTo: CreateReferenceBelongsTo
    taxonRank: TaxonRankEnum!
    acceptedConcept: TaxonConceptBelongsTo
    parent: TaxonConceptBelongsTo
    taxonomicStatus: TaxonomicStatusEnum
    occurrenceStatus: OccurrenceStatusEnum
    establishmentMeans: EstablishmentMeansEnum
    degreeOfEstablishment: DegreeOfEstablishmentEnum
    endemic: Boolean @rename(attribute: "is_endemic")
    hasIntroducedOccurrences: Boolean 
            @rename(attribute: "has_introduced_occurrences")
    remarks: String
}

input UpdateTaxonConceptInput {
    id: ID! @rename(attribute: "guid")
    taxonName: TaxonNameBelongsTo!
    accordingTo: CreateReferenceBelongsTo
    taxonRank: TaxonRankEnum!
    acceptedConcept: TaxonConceptBelongsTo
    parent: TaxonConceptBelongsTo
    taxonomicStatus: TaxonomicStatusEnum
    occurrenceStatus: OccurrenceStatusEnum
    establishmentMeans: EstablishmentMeansEnum
    degreeOfEstablishment: DegreeOfEstablishmentEnum
    endemic: Boolean @rename(attribute: "is_endemic")
    hasIntroducedOccurrences: Boolean 
            @rename(attribute: "has_introduced_occurrences")
    remarks: String
}

input TaxonConceptBelongsTo {
    connect: ID!
}

type MapLinks {
    profileMap: String
    distributionMap: String
    mapSource: String
}

type IdentificationKey {
    id: ID! @rename(attribute: "key_id")
    title: String! @rename(attribute: "key_title")
    taxonomicScope: String @rename(attribute: "taxonomic_scope")
    geographicScope: String @rename(attribute: "geographic_scope")
}

extend type Query {
    taxonConcept(id: ID! @eq(key: "guid")): TaxonConcept @find

    taxonConceptsByWkt(wkt: String!): [TaxonConcept]!
        @paginate(
            type: PAGINATOR
            defaultCount: 20
            builder: "\\App\\GraphQL\\Queries\\TaxonConceptsByWkt"
        )

    taxonConceptImages(taxonConceptId: ID!): [Image]
        @paginate(
            builder: "\\App\\GraphQL\\Queries\\TaxonConceptImages"
            defaultCount: 20
        )

    taxonConceptSpecimenImages(taxonConceptId: ID!): [SpecimenImage]
        @paginate(
            builder: "\\App\\GraphQL\\Queries\\TaxonConceptSpecimenImages"
            defaultCount: 20
        )

    "Get siblings of a TaxonConcept"
    taxonConceptSiblings(taxonConceptId: ID!): [TaxonConcept]
        @field(resolver: "\\App\\GraphQL\\Queries\\TaxonConceptSiblings")

    "Get children of a TaxonConcept"
    taxonConceptChildren(taxonConceptId: ID!): [TaxonConcept]
        @field(resolver: "\\App\\GraphQL\\Queries\\TaxonConceptChildren")

    "Get higher classification of a TaxonConcept"
    taxonConceptHigherClassifcation(taxonConceptId: ID!): [TaxonConcept]
        @field(
            resolver: "\\App\\GraphQL\\Queries\\TaxonConceptHigherClassification"
        )

    taxonConceptAutocomplete(q: String!): [TaxonConcept] 
        @field(
            resolver: "\\App\\GraphQL\\Queries\\TaxonConceptAutocomplete"
        )
}

extend type Mutation {
    createTaxonConcept(input: CreateTaxonConceptInput!): TaxonConcept
        @guard(with: ["api"])
        @field(resolver: "\\App\\GraphQL\\Mutations\\CreateTaxonConcept")

    updateTaxonConcept(input: UpdateTaxonConceptInput!): TaxonConcept
        @guard(with: ["api"])
        @field(resolver: "\\App\\GraphQL\\Mutations\\UpdateTaxonConcept")

    deleteTaxonConcept(id: ID!): TaxonConcept
        @guard(with: ["api"])
        @field(resolver: "\\App\\GraphQL\\Mutations\\DeleteTaxonConcept")
}
